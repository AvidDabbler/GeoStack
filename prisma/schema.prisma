generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  relationMode    = "prisma"
}

datasource db {
  provider   = "postgres"
  url        = env("DATABASE_URL")
  extensions = [postgis(version: "3.1.4"), uuid_ossp(map: "uuid-ossp")]
}

model Agency {
  id              Int      @id @default(autoincrement())
  agency_id       String?
  agency_name     String
  agency_url      String
  agency_timezone String
  agency_lang     String?
  agency_phone    String?
  agency_fare_url String?
  agency_email    String?
  updatedAt       DateTime
  userIds         String[]

  @@map("agency")
}

model Areas {
  area_id   String   @id
  area_name String?
  updatedAt DateTime
  agencyId  Int?
}

model Calendar {
  id         String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  service_id String
  monday     Int
  tuesday    Int
  wednesday  Int
  thursday   Int
  friday     Int
  saturday   Int
  sunday     Int
  end_date   Int
  start_date Int
  updatedAt  DateTime

  @@unique([service_id])
  @@index([end_date], map: "idx_calendar_end_date")
  @@index([start_date], map: "idx_calendar_start_date")
  @@map("calendar")
}

model CalendarDates {
  id             Int      @id @default(autoincrement())
  service_id     String
  date           Int
  exception_type Int
  holiday_name   String?
  updatedAt      DateTime

  @@index([exception_type], map: "idx_calendar_dates_exception_type")
  @@index([date], map: "idx_calendar_dates_date")
  @@index([service_id], map: "idx_calendar_dates_service_id")
  @@map("calendarDates")
}

model DeadHeadTimes {
  id                  Int      @id @default(autoincrement())
  deadhead_id         String
  arrival_time        String
  arrival_timestamp   Int?
  departure_time      String
  departure_timestamp Int?
  ops_location_id     String?
  stop_id             String?
  location_sequence   Int
  shape_dist_traveled Float?
  updatedAt           DateTime
  agencyId            Int?

  @@index([location_sequence], map: "idx_deadhead_times_location_sequence")
  @@index([departure_timestamp], map: "idx_deadhead_times_departure_timestamp")
  @@index([arrival_timestamp], map: "idx_deadhead_times_arrival_timestamp")
  @@index([deadhead_id], map: "idx_deadhead_times_deadhead_id")
  @@map("deadheadTimes")
}

model Deadheads {
  deadhead_id      String   @id
  service_id       String
  block_id         String
  shape_id         String?
  to_trip_id       String?
  from_trip_id     String?
  to_deadhead_id   String?
  from_deadhead_id String?
  updatedAt        DateTime
  tcAgencyId       String?  @db.Uuid
  agencyId         Int?

  @@index([from_deadhead_id], map: "idx_deadheads_from_deadhead_id")
  @@index([to_deadhead_id], map: "idx_deadheads_to_deadhead_id")
  @@index([from_trip_id], map: "idx_deadheads_from_trip_id")
  @@index([to_trip_id], map: "idx_deadheads_to_trip_id")
  @@index([shape_id], map: "idx_deadheads_shape_id")
  @@index([block_id], map: "idx_deadheads_block_id")
  @@map("deadheads")
}

model Directions {
  id           Int      @id @default(autoincrement())
  route_id     String
  direction_id Int?
  direction    String
  updatedAt    DateTime
  agencyId     Int?

  @@index([direction_id], map: "idx_directions_direction_id")
  @@index([route_id], map: "idx_directions_route_id")
  @@map("directions")
}

model FareAttributes {
  fare_id           String   @id
  price             Float
  currency_type     String
  payment_method    Int
  transfers         Int?
  agency_id         String?
  transfer_duration Int?
  updatedAt         DateTime
  agencyId          Int?

  @@map("fareAttributes")
}

model FareProducts {
  fare_product_id   String   @id
  fare_product_name String?
  amount            Float
  currency          String
  updatedAt         DateTime
  agencyId          Int?

  @@map("fareProducts")
}

model FareRules {
  id             Int      @id @default(autoincrement())
  fare_id        String
  route_id       String?
  origin_id      String?
  destination_id String?
  contains_id    String?
  updatedAt      DateTime
  agencyId       Int?

  @@map("fareRules")
}

model FeedInfo {
  id                  Int      @id @default(autoincrement())
  feed_publisher_name String
  feed_publisher_url  String
  feed_lang           String
  default_lang        String?
  feed_start_date     Int?
  feed_end_date       Int?
  feed_version        String?
  feed_contact_email  String?
  feed_contact_url    String?
  updatedAt           DateTime
  agencyId            Int?

  @@map("feedInfo")
}

model Frequencies {
  id              Int      @id @default(autoincrement())
  trip_id         String
  start_time      String
  start_timestamp Int?
  end_time        String
  end_timestamp   Int?
  headway_secs    Int
  exact_times     Int?
  updatedAt       DateTime
  agencyId        Int?

  @@index([trip_id], map: "idx_frequencies_trip_id")
  @@map("frequencies")
}

model Levels {
  level_id    String   @id
  level_index Float
  level_name  String?
  updatedAt   DateTime
  agencyId    Int?
}

model OpsLocations {
  ops_location_id   String   @id
  ops_location_code String?
  ops_location_name String
  ops_location_desc String?
  ops_location_lat  Float
  ops_location_lon  Float
  updatedAt         DateTime
  agencyId          Int?

  @@map("opsLocations")
}

model Pathways {
  pathway_id             String   @id
  from_stop_id           String
  to_stop_id             String
  pathway_mode           Int
  is_bidirectional       Int
  length                 Float?
  traversal_time         Int?
  stair_count            Int?
  max_slope              Float?
  min_width              Float?
  signposted_as          String?
  reversed_signposted_as String?
  updatedAt              DateTime
  agencyId               Int?

  @@map("pathways")
}

model Routes {
  agency_id              String?
  route_id               String   @id
  route_short_name       String
  route_long_name        String
  alias_route_short_name String?
  alias_route_long_name  String?
  route_desc             String?
  route_type             Int
  route_url              String?
  route_color            String?
  route_text_color       String?
  route_sort_order       Int?
  continuous_pickup      Int?
  continuous_drop_off    Int?
  network_id             String?
  updatedAt              DateTime
  agencyId               Int?

  @@map("routes")
}

model RunEvent {
  run_event_id             String   @id
  piece_id                 String
  event_type               Int
  event_name               String?
  event_time               String
  event_duration           Int
  event_from_location_type Int?
  event_from_location_id   String?
  event_to_location_type   Int?
  event_to_location_id     String?
  updatedAt                DateTime
  agencyId                 Int?

  @@index([event_to_location_type], map: "idx_run_event_event_to_location_type")
  @@index([event_from_location_type], map: "idx_run_event_event_from_location_type")
  @@index([event_type], map: "idx_run_event_event_type")
  @@map("runEvent")
}

model RunsPieces {
  run_id              String
  piece_id            String   @id
  start_type          Int
  start_trip_id       String
  start_trip_position Int?
  end_type            Int
  end_trip_id         String
  end_trip_position   Int?
  updatedAt           DateTime
  agencyId            Int?

  @@index([end_trip_id], map: "idx_runs_pieces_end_trip_id")
  @@index([end_type], map: "idx_runs_pieces_end_type")
  @@index([start_trip_id], map: "idx_runs_pieces_start_trip_id")
  @@index([start_type], map: "idx_runs_pieces_start_type")
  @@map("runsPieces")
}

model ServiceAlertTargets {
  alert_id  String   @id
  stop_id   String?
  route_id  String?
  isUpdated Int      @default(1)
  updatedAt DateTime
  agencyId  Int?

  @@index([route_id], map: "idx_service_alert_targets_route_id")
  @@index([stop_id], map: "idx_service_alert_targets_stop_id")
  @@index([alert_id], map: "idx_service_alert_targets_alert_id")
  @@map("serviceAlertTargets")
}

model ServiceAlerts {
  id          String   @id
  cause       Int
  start_time  String
  end_time    String
  headline    String
  description String
  isUpdated   Int      @default(1)
  updatedAt   DateTime
  agencyId    Int?

  @@index([id], map: "idx_service_alerts_id")
  @@map("serviceAlerts")
}

model Shapes {
  id                  Int      @id @default(autoincrement())
  shape_id            String
  shape_pt_lat        Float
  shape_pt_lon        Float
  shape_pt_sequence   Int
  shape_dist_traveled Float?
  updatedAt           DateTime
  agencyId            Int?

  @@index([shape_id], map: "idx_shapes_shape_id")
  @@map("shapes")
}

model ShapeGeos {
  shape_id  String
  updatedAt DateTime
  geom      Unsupported("geometry")?
  agencyId  Int?

  @@id([shape_id])
  @@index([geom], map: "shape_geom_idx", type: Gist)
  @@map("shapesGeos")
}

model StopAttributes {
  id        Int      @id @default(autoincrement())
  stop_id   String
  stop_city String?
  updatedAt DateTime
  agencyId  Int?

  @@index([stop_id], map: "idx_stop_attributes_stop_id")
  @@map("stopAttributes")
}

model StopTimes {
  id                  Int      @id @default(autoincrement())
  trip_id             String
  arrival_time        String?
  arrival_timestamp   Int?
  departure_time      String?
  departure_timestamp Int?
  stop_id             String
  stop_sequence       Int
  stop_headsign       String?
  pickup_type         Int?
  drop_off_type       Int?     @default(0)
  continuous_pickup   Int?
  continuous_drop_off Int?
  shape_dist_traveled Float?
  timepoint           Int?
  updatedAt           DateTime
  agencyId            Int?

  @@index([stop_sequence], map: "idx_stop_times_stop_sequence")
  @@index([departure_timestamp], map: "idx_stop_times_departure_timestamp")
  @@index([arrival_timestamp], map: "idx_stop_times_arrival_timestamp")
  @@index([trip_id], map: "idx_stop_times_trip_id")
  @@map("stopTimes")
}

model Stops {
  stop_id             String                   @id
  stop_code           String?
  stop_name           String
  tts_stop_name       String?
  stop_desc           String?                  @default("")
  stop_lat            Float?
  stop_lon            Float?
  zone_id             String?
  stop_url            String?
  location_type       Int?
  parent_station      String?
  stop_timezone       String?
  wheelchair_boarding Int?
  level_id            String?
  platform_code       String?
  updatedAt           DateTime
  geom                Unsupported("geometry")?
  agencyId            Int?

  @@index([parent_station], map: "idx_stops_parent_station")
  @@index([geom], map: "stops_idx", type: Gist)
  @@map("stops")
}

model TimetableStopOrder {
  id            Int      @id @default(autoincrement())
  timetable_id  String?
  stop_id       String?
  stop_sequence Int?
  updatedAt     DateTime
  agencyId      Int?

  @@index([stop_sequence], map: "idx_timetable_stop_order_stop_sequence")
  @@index([timetable_id], map: "idx_timetable_stop_order_timetable_id")
  @@map("timetableStopOrder")
}

model Timetables {
  id                     Int      @id @default(autoincrement())
  timetable_id           String?
  route_id               String?
  direction_id           Int?
  start_date             Int?
  end_date               Int?
  monday                 Int
  tuesday                Int
  wednesday              Int
  thursday               Int
  friday                 Int
  saturday               Int
  sunday                 Int
  start_time             String?
  start_timestamp        Int?
  end_time               String?
  end_timestamp          Int?
  timetable_label        String?
  service_notes          String?
  orientation            String?
  timetable_page_id      String?
  timetable_sequence     Int?
  direction_name         String?
  include_exceptions     Int?
  show_trip_continuation Int?
  updatedAt              DateTime
  agencyId               Int?

  @@index([timetable_sequence], map: "idx_timetables_timetable_sequence")
  @@map("timetables")
}

model Transfers {
  id                Int      @id @default(autoincrement())
  from_stop_id      String?
  to_stop_id        String?
  from_route_id     String?
  to_route_id       String?
  from_trip_id      String?
  to_trip_id        String?
  transfer_type     Int?
  min_transfer_time Int?
  updatedAt         DateTime
  agencyId          Int?

  @@index([to_stop_id], map: "idx_transfers_to_stop_id")
  @@index([from_stop_id], map: "idx_transfers_from_stop_id")
  @@map("transfers")
}

model TripUpdates {
  update_id    String   @id
  vehicle_id   String?
  trip_id      String?
  start_date   String?
  timestamp    String?
  isUpdated    Int      @default(1)
  updatedAt    DateTime
  tripsTrip_id String?
  vehiclesId   String?  @db.Uuid
  agencyId     Int?
  tCAgencyId   String?  @db.Uuid

  @@index([trip_id], map: "idx_trip_updates_trip_id")
  @@index([vehicle_id], map: "idx_trip_updates_vehicle_id")
  @@index([update_id], map: "idx_trip_updates_update_id")
  @@map("tripUpdates")
}

model Trips {
  route_id              String
  service_id            String
  trip_id               String   @id
  trip_headsign         String?
  trip_short_name       String?
  direction_id          Int?
  block_id              String?
  shape_id              String?
  wheelchair_accessible Int?
  bikes_allowed         Int?
  updatedAt             DateTime
  agencyId              Int?
  tCAgencyId            String?  @db.Uuid

  @@index([shape_id], map: "idx_trips_shape_id")
  @@index([block_id], map: "idx_trips_block_id")
  @@index([direction_id], map: "idx_trips_direction_id")
  @@index([service_id], map: "idx_trips_service_id")
  @@index([route_id], map: "idx_trips_route_id")
  @@map("trips")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}
